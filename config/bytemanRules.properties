# ListRules :  a serie of name rules separated by a semicolon (;)
# For each rule a paragraph below configure the model of the custom parameters see the commented first paragraph rule of the dummyRuleForClass below
listRules=dummyRuleForClass;dummyRuleForInterface;durationMethods;countExecutionMethods;countMethodsCalls;mockMethods;mockMethodsWithTrace;cpuDurationMethods;httpSessionSize;httpSessionDestroyedSize;sqlStatementsDuration;jpaSessionSize;dbcpPoolManagementBasicDS;dbcpPoolManagementPoolingDS;getBasicAttributesValues;getBasicAttributesValuesJMX;c3p0PoolManagementComboDS;

# Except comments and tpl, all parms have at least 2 fields. You can add a third field with the following format <IDENT_TO_REPLACE_IN_RULE>
# That means that if the format is <VAR_TO_REPLACE>, if the rule xxx has a parameter like beloww :
# myrule.myparam90=parametrizedParam;TextField;<VAR_TO_REPLACE>;
# the template file of the rule saying myrule.tpl, has a statement with the same format <VAR_TO_REPLACE> for exmaple a BIND expression like
# BIND targetObject:Object=$<VAR_TO_REPLACE>
# if you fill the TextField, in the JFX Frame of rule configuration, with the value 0 (zero), the BIND exprssion will become :
# BIND targetObject:Object=$0

#dummyRuleForClass
# a comment that describe the rule, that appears as a TextArea int the JFX Frame
dummyRuleForClass.comment= dummyRuleClass Each part of a Byteman rule must be filled from scratch.\n in listMethods you can fill several method with the format (opt => optionnal, | -> OR) :\n\t\t opt(<return_type>) opt(^) (fullQualifiedClass|shortNameClass).method opt((typeArg1,TypeArg2...)); ( don't forget the semicolon)\n In the TextArea, you can add a line feed after the semicolon.
# multiInstantiation : doesn't appear in the JFX Window : true means that the rule must be parameted several times, false means only once and the rule desappears from the left chosing rule tree at its first choose.
dummyRuleForClass.multiInstantiation=true
# param1 first param that name is listMethods and rendered in a TextArea
dummyRuleForClass.param1=listMethods;TextArea
# paraman2 second param that name is helper and rendered in a TextArea
dummyRuleForClass.param2=helper;TextField
# and so on ..
dummyRuleForClass.param3=location;TextField
# and so on ..
dummyRuleForClass.param4=bindStatement;TextArea
# and so on ..
dummyRuleForClass.param5=ifStatement;TextField
# and so on ..
dummyRuleForClass.param6=doStatement;TextArea
# tpl points to the template used for building the rule in the bytemanpkg.btm script.
dummyRuleForClass.tpl=dummyRuleForClass.tpl

#dummyRuleForInterface
dummyRuleForInterface.comment= dummyRuleForInterface Each part of a Byteman rule must be filled from scratch.\n in listMethods you can fill several method with the format (opt => optionnal, | -> OR) :\n\t\t opt(<return_type>) opt(^) (fullQualifiedClass|shortNameClass).method opt((typeArg1,TypeArg2...)); ( don't forget the semicolon)\n In the TextArea, you can add a line feed after the semicolon.
dummyRuleForInterface.multiInstantiation=true
dummyRuleForInterface.param1=listMethods;TextArea
dummyRuleForInterface.param2=helper;TextField
dummyRuleForInterface.param3=location;TextField
dummyRuleForInterface.param4=bindStatement;TextArea
dummyRuleForInterface.param5=ifStatement;TextField
dummyRuleForInterface.param6=doStatement;TextArea
dummyRuleForInterface.tpl=dummyRuleForInterface.tpl


# Duration of excecution of methods ( including tree of  called methods)
durationMethods.comment=Computes the duration of methods\nlistMethods => list of semi-colon (;)  separated (full qualified or not) names of method :\n    <optional Return Type> <optional packageFullName.>className.methodName< optional list Parameter types => (Type1,Type2)>\nPattern examples : \n - String package1.package2.MyClass.method(String,Integer) \n - Class.myMethod \n - package1.packag2.MyClass.myMethod \n - MyClass.myMethod(String, MyObjectType,Integer) \n are  correct syntaxes 
durationMethods.multiInstantiation=true
durationMethods.param1=listMethods;TextArea
durationMethods.param2=minDuration;TextField
durationMethods.tpl=durationMethods.tpl

# Counting number of executions of a method
countExecutionMethods.comment=Counts the number of executions of methods\nlistMethods => list of semi-colon (;)  separated (full qualified  or not) names of method :\n    <optional Return Type> < optional packageFullName.>className.methodName <optional list Parameter types => (Type1,Type2)>\nPattern examples :\n - String package1.package2.MyClass.method(String,Integer) \n - Class.myMethod \n - package1.packag2.MyClass.myMethod \n - MyClass.myMethod(String, MyObjectType,Integer)  \n are correct syntaxes\n frequency => Integer set the frequency of logging in log file
countExecutionMethods.multiInstantiation=true
countExecutionMethods.param1=listMethods;TextArea
countExecutionMethods.param2=frequency;TextField
countExecutionMethods.tpl=countExecutionMethods.tpl

# Counting number of calls of a method
countMethodsCalls.comment=Counts the number of calls of methods\nlistMethods => list of semi-colon (;)  separated (full qualified  or not) names of method :\n    <optional Return Type> < optional packageFullName.>className.methodName <optional list Parameter types => (Type1,Type2)>\nPattern examples :\n - String package1.package2.MyClass.method(String,Integer) \n - Class.myMethod \n - package1.packag2.MyClass.myMethod \n - MyClass.myMethod(String, MyObjectType,Integer)  \n are correct syntaxes\n frequency => Integer set the frequency of logging in log file
countMethodsCalls.multiInstantiation=true
countMethodsCalls.param1=listMethods;TextArea
countMethodsCalls.param2=frequency;TextField
countMethodsCalls.tpl=countMethodsCalls.tpl

# Counting number of mocking a method
mockMethods.comment=Mocks a method at certain location\nlistMethods => list of semi-colon (;)  separated (full qualified  or not) names of method :\n    <optional Return Type> < optional packageFullName.>className.methodName <optional list Parameter types => (Type1,Type2)>\nPattern examples :\n - String package1.package2.MyClass.method(String,Integer) \n - Class.myMethod \n - package1.packag2.MyClass.myMethod \n - MyClass.myMethod(String, MyObjectType,Integer)  \n are correct syntaxes\n locations, list of locations separated by semi-colon(;) ( One per method)\n returns list of returns DO code separeted by semi-colon, one for each method) the caracter \ means a new line, it is replaced by a ; at generation of the rule
mockMethods.multiInstantiation=true
mockMethods.param1=listMethods;TextArea
mockMethods.param2=helperClass;TextField
mockMethods.param3=location;TextField
mockMethods.param4=doStatement;TextArea
mockMethods.tpl=mockMethods.tpl

# Counting number of executions of a method
mockMethodsWithTrace.comment=Mocks a method at certain location\nlistMethods => list of semi-colon (;)  separated (full qualified  or not) names of method :\n    <optional Return Type> < optional packageFullName.>className.methodName <optional list Parameter types => (Type1,Type2)>\nPattern examples :\n - String package1.package2.MyClass.method(String,Integer) \n - Class.myMethod \n - package1.packag2.MyClass.myMethod \n - MyClass.myMethod(String, MyObjectType,Integer)  \n are correct syntaxes\n locations, list of locations separated by semi-colon(;) ( One per method)\n returns list of returns DO code separeted by semi-colon, one for each method) the caracter \ means a new line, it is replaced by a ; at generation of the rule
mockMethodsWithTrace.multiInstantiation=true
mockMethodsWithTrace.param1=listMethods;TextArea
mockMethodsWithTrace.param2=helperClass;TextField
mockMethodsWithTrace.param3=location;TextField
mockMethodsWithTrace.param4=doStatement;TextArea
mockMethodsWithTrace.tpl=mockMethodsWithTrace.tpl

# CPU Duration of excecution of methods 
cpuDurationMethods.comment=Computes the CPU duration of methods\nlistMethods => list of semi-colon (;)  separated (full qualified or not) names of method :\n    <optional Return Type> <optional packageFullName.>className.methodName< optional list Parameter types => (Type1,Type2)>\nPattern examples : \n - String package1.package2.MyClass.method(String,Integer) \n - Class.myMethod \n - package1.packag2.MyClass.myMethod \n - MyClass.myMethod(String, MyObjectType,Integer) \n are  correct syntaxes 
cpuDurationMethods.multiInstantiation=true
cpuDurationMethods.param1=listMethods;TextArea
cpuDurationMethods.param2=minDuration;TextField
cpuDurationMethods.tpl=cpuDurationMethods.tpl

# HttpSessionSize
httpSessionSize.comment=Computes the size of HttpSessionin ENTRY location\n boolSerialization ( true/false) => use writeObject to compute the size, false => switch to strategy\n frequenceMeasure (int) => examine each n trigger of rules \n strategy ( shallowSize / retainedHeap) shallowSize => Helper.getObjectSize; retainedHeap =>  RamUsageEstimator.sizeOf ( project java-sizeof)\n
httpSessionSize.multiInstantiation=false
httpSessionSize.param1=boolSerialization;TextField
httpSessionSize.param2=frequenceMeasure;TextField
httpSessionSize.param3=strategy;TextField
httpSessionSize.tpl=httpSessionSize.tpl

# HttpSessionDestroyedSize
httpSessionDestroyedSize.comment=Computes the size of HttpSession when destroyed in ENTRY location \n boolSerialization ( true/false) => use writeObject to compute the size, false => switch to strategy\n frequenceMeasure (int) => examine each n trigger of rules \n strategy (  shallowSize / retainedHeap) shallowSize => Helper.getObjectSize; retainedHeap =>  RamUsageEstimator.sizeOf ( project java-sizeof)\n
httpSessionDestroyedSize.multiInstantiation=false
httpSessionDestroyedSize.param1=boolSerialization;TextField
httpSessionDestroyedSize.param2=frequenceMeasure;TextField
httpSessionDestroyedSize.param3=strategy;TextField
httpSessionDestroyedSize.tpl=httpSessionDestroyedSize.tpl

# sqlStatementsDurations
sqlStatementsDuration.comment=Computes the duration in ms of PreparedStatement.\n longMaxReq => int length of the logged sqlstatement String .\n stripBeforeWhereBool (true/false) true =>  exclude all the string after where clause.\n boolBindParameters : some JDBC Driver have a class implementing PreparedStatement with a toString() method that gives the values of the bound parameters:\n\t\t true uses the toString method.\n\t\t false the preparedStatement is given as is.\n minDuration in milliseconds => trace only preparedStatement where duration >= minDuration 
sqlStatementsDuration.multiInstantiation=false
sqlStatementsDuration.param1=longMaxReq;TextField
sqlStatementsDuration.param2=stripBeforeWhereBool;TextField
sqlStatementsDuration.param3=boolBindParameters;TextField
sqlStatementsDuration.param4=minDuration;TextField
sqlStatementsDuration.tpl=sqlStatementsDuration.tpl


# jpaSessionSize
jpaSessionSize.comment= Tracks the behaviour of  DBCP JDBC pool for Datasource :org.apache.commons.dbcp.BasicDataSource \n aspectSerialization ( true/false) => use writeObject to compute the size, false => switch to strategy \n frequenceMeasure (int) => examine each n trigger of rules \n strategy (  shallowSize / retainedHeap) shallowSize => Helper.getObjectSize; retainedHeap =>  RamUsageEstimator.sizeOf ( project java-sizeof)\n
jpaSessionSize.multiInstantiation=false
jpaSessionSize.param1=boolSerialization;TextField
jpaSessionSize.param2=frequenceMeasure;TextField
jpaSessionSize.param3=strategy;TextField
jpaSessionSize.tpl=jpaSessionSize.tpl

# dbcpPoolManagementBasicDS
dbcpPoolManagementBasicDS.comment= Tracks the behaviour of  DBCP JDBC pool for Datasource :org.apache.commons.dbcp.BasicDataSource \n The tracked method is org.apache.commons.dbcp.BasicDataSource.getConnection\n
dbcpPoolManagementBasicDS.multiInstantiation=false
dbcpPoolManagementBasicDS.param1=frequenceMeasure;TextField
dbcpPoolManagementBasicDS.tpl=dbcpPoolManagementBasicDS.tpl

# dbcpPoolManagementPoolingDS
dbcpPoolManagementPoolingDS.comment= Tracks the behaviour of  DBCP JDBC pool for Datasource :org.apache.commons.dbcp.PoolingDataSource \nThe tracked method is org.apache.commons.dbcp.PoolingDataSource.getConnection\n
dbcpPoolManagementPoolingDS.multiInstantiation=false
dbcpPoolManagementPoolingDS.param1=frequenceMeasure;TextField
dbcpPoolManagementPoolingDS.tpl=dbcpPoolManagementPoolingDS.tpl


# getBasicAttributesValues
getBasicAttributesValues.comment= Tracks the attribute values of a Java Bean ( with getter) \n listMethods must contain only a class.method\nfrequenceMeasure (int) => examine each n trigger of rules\n rankObjectToTrack => use Byteman access $0 $1 $2 $! but without $ etc relative to the class.method triggered ... \n frequenceMeasure => numeric \n  toTrigger => fields to track, first letter must be lowercase and highercase  as for example [Mm]ax.*\n notToTrigger => methods not tracked \ndepthAnalysis most current value => -1;  => -1 the current class, 0 the current class and parent  ... \nRead more detailed explanations in UserGuide document.
getBasicAttributesValues.multiInstantiation=true
getBasicAttributesValues.param1=listMethods;TextField
getBasicAttributesValues.param2=rankObjectToTrack;TextField;<RANK_OBJECT>
getBasicAttributesValues.param3=frequenceMeasure;TextField
getBasicAttributesValues.param4=toTrigger;TextField
getBasicAttributesValues.param5=notToTrigger;TextField
getBasicAttributesValues.param6=depthAnalysis;TextField
getBasicAttributesValues.tpl=getBasicAttributesValues.tpl

# getBasicAttributesValuesJMX
getBasicAttributesValuesJMX.comment= Tracks the attribute values of a Java Bean ( with getter) and expose it as MBean \n listMethods must contain only a class.method\nfrequenceMeasure (int) => examine each n trigger of rules\n rankObjectToTrack => use Byteman access $0 $1 $2 $! but without $ etc relative to the class.method triggered ... \n frequenceMeasure => numeric \n  toTrigger => fields to track, first letter must be lowercase and highercase as for example [Mm]ax.* \n notToTrigger => methods not tracked \n depthAnalysis most current value => -1;  => -1 the current class, 0 the current class and parent ...\nisAtClassLevel  => true => only one MBean for the class for avoiding creation of too much MBeans,\n    false (default)  => a MBean by Object \nRead more detailed explanations in UserGuide document.
getBasicAttributesValuesJMX.multiInstantiation=true
getBasicAttributesValuesJMX.param1=listMethods;TextField
getBasicAttributesValuesJMX.param2=rankObjectToTrack;TextField;<RANK_OBJECT>
getBasicAttributesValuesJMX.param3=frequenceMeasure;TextField
getBasicAttributesValuesJMX.param4=toTrigger;TextField
getBasicAttributesValuesJMX.param5=notToTrigger;TextField
getBasicAttributesValuesJMX.param6=depthAnalysis;TextField
getBasicAttributesValuesJMX.param7=isAtClassLevel;TextField
getBasicAttributesValuesJMX.tpl=getBasicAttributesValuesJMX.tpl


# c3p0PoolManagementComboDS
c3p0PoolManagementComboDS.comment= Tracks the behaviour of  C3P0 JDBC pool for Datasource : com.mchange.v2.c3p0.ComboPooledDataSource\n The tracked method is ^com.mchange.v2.c3p0.impl.AbstractPoolBackedDataSourcee.getConnection\n
c3p0PoolManagementComboDS.multiInstantiation=false
c3p0PoolManagementComboDS.param1=frequenceMeasure;TextField
c3p0PoolManagementComboDS.tpl=c3p0PoolManagementComboDS.tpl

